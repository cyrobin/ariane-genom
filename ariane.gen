/*
 * Copyright (c) 2013 CNRS/LAAS
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*------------------------------------------------------------------------
 *
 *                     --  Module Ariane-genom --
 *
 *  Description:
 *  Creation Date : Fri Oct 04 2013
 *  Author: Cyril Robin
 *
 * ----------------------------------------------------------------------
 */

module ariane
{
    number:	    1979; // first launch
    requires:   pom, dtm, genPos, genBasic; 
    codels_requires: "libariane >= 0.1.0", "gladys >= 0.2.2", dtm, pom;
    internal_data:	ARIANE_STR;
    version:	"0.1";
	lang: "c++";
    email: "cyril.robin@laas.fr";
};
 

/****************************************************
                   IMPORTS/DEFINITIONS 
 ****************************************************/
import from pom {
#include "pomStruct.h"
};

import from dtm {
#include "dtmStruct.h"
};

import from genPos {
#include "genPosStruct.h"
};

import from genBasic {
#include "genBasicStruct.h"
};

#include "arianeStruct.h"

/* ---- Module database description ---- */
typedef struct ARIANE_STR {
	arianeInitParams initParams;
	arianeInternalParams internalParams;
	GEN_POINT_2D goal ;
	GEN_BOOL dump;
	GENPOS_TRAJ_POINTS path;
	char logDir[ariane_MAX_LENGTH];
} ARIANE_STR;

/****************************************************
                       REQUESTS
 ****************************************************/
/* Initialize the module, load the models */
request Init
{
    doc:        "Load the initial weight_map and link with the DTM poster.";
    type:       init; // There is only one !
    exec_task:  Exec;
    codel_main: arianeInitMain;

    input: 
        arianeInitParams::initParams;
    input_info: 
        ariane_REGION_FILE_PATH::"Path to the initial region map file",
        ariane_ROBOT_FILE_PATH::"Path to the initial roboc json file",
        ariane_DTM_POSTER_NAME::"DTM poster's name",
        ariane_POM_POSTER_NAME::"POM Pos poster's name",
        ariane_MAX_STEP_LENGTH::"maximal distance between two successive waypoints",
        ariane_CURB_TOLERANCE::"define additional waypoints in curves (see ariane for details)",
        ariane_DEFAULT_LOGDIR::"Log directory";

    fail_msg: CANNOT_CONNECT, FAILED_CREATION;
    interrupt_activity: all; // all other request can interrupt
};

request FindPath{
    doc:            "Unwind the ball of thread !";
    type:           exec;
	exec_task:      Exec; 

    
    input:
        goal::goal;
	posters_input:  POM_POS, DTM_LABEL_POSTER;

    codel_main:         arianeFindPathMain;
    fail_reports:       UNEXPECTED_DATA, CANNOT_READ_POSTER, CANNOT_UPDATE_POSTER;
    interrupt_activity: all;
};

request UpdateMap{
    doc:            "Update the map use to compute path with DTM data";
    type:           exec;
	exec_task:      Exec; 

	posters_input:  DTM_LABEL_POSTER;

    codel_main:         arianeUpdateMaphMain;
    fail_reports:       CANNOT_READ_POSTER, CANNOT_UPDATE_NAV_GRAPH ;
    interrupt_activity: all;
};

request SetParameters {
    doc:            "Set the internal parameters";
    type:           control;

    input: 
        arianeInternalParams::internalParams;
    codel_control:         arianeSetParametersCtrl;
    interrupt_activity: all; 
};

request EnableDump{
    doc:            "Enable the dumping of data";
    type:           control;
    codel_control:  arianeEnableDumpCtrl;
    interrupt_activity: all; 
};

request DisableDump{
    doc:            "Disable the dumping of data";
    type:           control;
    codel_control:  arianeDisableDumpCtrl;
    interrupt_activity: all; 
};

/****************************************************
                       POSTER(s)
 ****************************************************/
poster Path {
	update:     auto;
	data:       path::path;
	exec_task:  Exec;
};

/****************************************************
                       EXEC TASK
 ****************************************************/
exec_task Exec {
	stack_size:         20000; // in bytes
	/*fail_reports: NO_FRONTIER, CANNOT_READ_POM;*/
};

